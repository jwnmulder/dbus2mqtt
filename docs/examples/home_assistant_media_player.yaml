dbus:
  subscriptions:

    - bus_name: org.mpris.MediaPlayer2.*
      path: /org/mpris/MediaPlayer2
      # https://mpris2.readthedocs.io/en/latest/interfaces.html#mpris2.MediaPlayer2

      interfaces:
        - interface: org.freedesktop.DBus.Properties
          signals:
            - signal: PropertiesChanged
              filter: "{{ args[0] == 'org.mpris.MediaPlayer2.Player' }}"
          methods:
            - method: GetAll

        - interface: org.mpris.MediaPlayer2
          mqtt_command_topic: dbus2mqtt/org.mpris.MediaPlayer2/command
          methods:
            - method: Quit

        - interface: org.mpris.MediaPlayer2.Player
          mqtt_command_topic: dbus2mqtt/org.mpris.MediaPlayer2/command
          signals:
            - signal: Seeked
          methods:
            - method: Pause
            - method: Play
            - method: Stop
            - method: Next
            - method: Previous
            - method: Seek
            - method: SetPosition
            - method: PlayPause
            - method: OpenUri
          properties:
            - property: Volume

      flows:
        - name: "publish player state"
          triggers:
            - type: object_added
            - type: schedule
              interval: {seconds: 5}
            - type: dbus_signal
              interface: org.freedesktop.DBus.Properties
              signal: PropertiesChanged
              # filter: "{{ args[0] == 'org.mpris.MediaPlayer2.Player' }}"
            - type: dbus_signal
              interface: org.mpris.MediaPlayer2.Player
              signal: Seeked
          actions:
            - type: context_set
              context:
                mpris_bus_name: '{{ dbus_list("org.mpris.MediaPlayer2.*") | first }}'
                mpris_path: /org/mpris/MediaPlayer2
                # Some players return stale position if GetAll is executed immediately after a seeked signal.
                # By storing the seeked position it can be used to override Position below
                seeked_position: '{{ args[0] if trigger_type == "dbus_signal" and signal == "Seeked" else None }}'
            - type: context_set
              context:
                player_properties: |
                  {{ dbus_call(mpris_bus_name, mpris_path, 'org.freedesktop.DBus.Properties', 'GetAll', ['org.mpris.MediaPlayer2.Player']) }}
            - type: mqtt_publish
              topic: dbus2mqtt/org.mpris.MediaPlayer2/state
              payload_type: json
              payload_template: |
                {{
                    { 'bus_name': mpris_bus_name }
                    | combine(player_properties)
                    | combine ({ 'Position': seeked_position } if seeked_position else {})
                }}

        - name: "publish local art image"
          # mpris:artUrl can have a file:// or http:// schema
          # Home Assistant is unable to access file:// so we use MQTT for that
          triggers:
            - type: object_added
            - type: dbus_signal
              interface: org.freedesktop.DBus.Properties
              signal: PropertiesChanged
          actions:
            - type: context_set
              context:
                artUrl: "{{ (dbus_property_get(bus_name, path, 'org.mpris.MediaPlayer2.Player', 'Metadata') or {}).get('mpris:artUrl') }}"
            - type: mqtt_publish
              topic: dbus2mqtt/org.mpris.MediaPlayer2/artUrlImage
              payload_type: binary
              payload_template: |
                {{ artUrl if artUrl and artUrl.startswith('file://') else None }}

        - name: "player removed"
          triggers:
            - type: object_removed
            # filter: # TODO: Check if this is the last or inactive one #
          actions:
            - type: mqtt_publish
              topic: dbus2mqtt/org.mpris.MediaPlayer2/state
              payload_type: json
              payload_template:
                PlaybackStatus: "Off"
        - name: "PlayPause"
          # TODO: Check what will happen when reusing dbus2mqtt/org.mpris.MediaPlayer2/command
          # need to check if it works as expected and logs make sense

          # Scenarios
          # 1. MQTT msg with valid dbus Play command that triggers both dbus and flows
          # 2. MQTT msg with invalid dbus Play command that triggers both dbus and flows (e.g. play-pause)
          #      - This will likely just work but might cause warnings in logs
          #      - MQTT command support 'bus_name' and 'path' wildcard matching, defaulting to '*', '*'
          #      - Flows doing dbus calls should support wildcard bus_name and path parameters
          # 3. MQTT msg with valid dbus Play command that triggers just flows
          #      - Should this be supported? Just use a different queue topic?
          # 4. MQTT msg with valid invalid dbus payload structure that triggers both dbus and flows
          #      - Check logs and see if we need to make intent explicit in mqtt payloads
          #      - Backwards compatibility
          triggers:
            - type: mqtt_msg
              topic: dbus2mqtt/org.mpris.MediaPlayer2/command
              filter: "{{ payload.action == 'play-pause' }}"
          actions:
            - type: context_set
              context:
                mpris_bus_name: '{{ dbus_list("org.mpris.MediaPlayer2.*") | first }}'
                path: /org/mpris/MediaPlayer2
            - type: context_set
              context:
                current_playback_status: |
                  {{ dbus_property_get(mpris_bus_name, path, 'org.mpris.MediaPlayer2.Player', 'PlaybackStatus', 0) }}
