{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dbus2mqtt","text":"<p>dbus2mqtt is a Python application that bridges DBus with MQTT. It lets you forward Linux D-Bus signals and properties to MQTT topics, call D-Bus methods via MQTT messages, and shape payloads using flexible Jinja2 templating.</p> <p>This makes it easy to integrate Linux desktop services or system signals into MQTT-based workflows - including Home Assistant.</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>\ud83d\udd17 Forward D-Bus signals to MQTT topics.</li> <li>\ud83e\udde0 Enrich or transform MQTT payloads using Jinja2 templates and additional D-Bus calls.</li> <li>\u26a1 Trigger message publishing via signals, timers, property changes, or startup events.</li> <li>\ud83d\udce1 Expose D-Bus methods for remote control via MQTT messages.</li> <li>\ud83c\udfe0 Includes example configurations for MPRIS and Home Assistant Media Player integration.</li> </ul>"},{"location":"#project-status","title":"Project status","text":"<p>dbus2mqtt is considered stable for the use-cases it has been tested against, and is actively being developed. Documentation is continuously being improved.</p> <p>Initial testing has focused on MPRIS integration. A table of tested MPRIS players and their supported methods can be found here: home_assistant_media_player.md</p>"},{"location":"#getting-started-with-dbus2mqtt","title":"Getting started with dbus2mqtt","text":"<p>Create a <code>config.yaml</code> file with the contents shown below. This configuration will expose all bus properties from the <code>org.mpris.MediaPlayer2.Player</code> interface to MQTT on the <code>dbus2mqtt/org.mpris.MediaPlayer2/state</code> topic. Have a look at docs/examples for more examples</p> <pre><code>dbus:\n  subscriptions:\n    - bus_name: org.mpris.MediaPlayer2.*\n      path: /org/mpris/MediaPlayer2\n      interfaces:\n        - interface: org.freedesktop.DBus.Properties\n          methods:\n            - method: GetAll\n\n      flows:\n        - name: \"Publish MPRIS state\"\n          triggers:\n            - type: object_added\n            - type: schedule\n              interval: {seconds: 5}\n          actions:\n            - type: context_set\n              context:\n                mpris_bus_name: '{{ dbus_list(\"org.mpris.MediaPlayer2.*\") | first }}'\n                path: /org/mpris/MediaPlayer2\n            - type: mqtt_publish\n              topic: dbus2mqtt/org.mpris.MediaPlayer2/state\n              payload_type: json\n              payload_template: |\n                {{ dbus_call(mpris_bus_name, path, 'org.freedesktop.DBus.Properties', 'GetAll', ['org.mpris.MediaPlayer2.Player']) }}\n</code></pre> <p>MQTT connection details can be configured in that same <code>config.yaml</code> file or via environment variables. For now create a <code>.env</code> file with the following contents.</p> <pre><code>MQTT__HOST=localhost\nMQTT__PORT=1883\nMQTT__USERNAME=\nMQTT__PASSWORD=\n</code></pre>"},{"location":"#install-and-run-dbus2mqtt","title":"Install and run dbus2mqtt","text":"<pre><code>python -m pip install dbus2mqtt\ndbus2mqtt --config config.yaml\n</code></pre>"},{"location":"#run-using-docker-with-auto-start-behavior","title":"Run using docker with auto start behavior","text":"<p>To build and run dbus2mqtt using Docker with the home_assistant_media_player.yaml example from this repository.</p> <pre><code># setup configuration\nmkdir -p $HOME/.config/dbus2mqtt\ncp docs/examples/home_assistant_media_player.yaml $HOME/.config/dbus2mqtt/config.yaml\ncp .env.example $HOME/.config/dbus2mqtt/.env\n\n# run image and automatically start on reboot\nsudo docker pull jwnmulder/dbus2mqtt\nsudo docker run --detach --name dbus2mqtt \\\n  --volume \"$HOME\"/.config/dbus2mqtt:\"$HOME\"/.config/dbus2mqtt \\\n  --volume /run/user:/run/user \\\n  --env DBUS_SESSION_BUS_ADDRESS=\"$DBUS_SESSION_BUS_ADDRESS\" \\\n  --env-file \"$HOME\"/.config/dbus2mqtt/.env \\\n  --user $(id -u):$(id -g) \\\n  --privileged \\\n  --restart unless-stopped \\\n  jwnmulder/dbus2mqtt \\\n  --config \"$HOME\"/.config/dbus2mqtt/config.yaml\n\n# view logs\nsudo docker logs dbus2mqtt -f\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>This repository contains examples under docs/examples. The most complete one being MPRIS to Home Assistant Media Player integration</p>"},{"location":"#configuration-reference","title":"Configuration reference","text":"<p>dbus2mqtt leverages jsonargparse which allows configuration via either yaml configuration, CLI or environment variables. Until this is fully documented have a look at the examples in this repository.</p>"},{"location":"#mqtt-and-d-bus-connection-details","title":"MQTT and D-Bus connection details","text":"<pre><code># dbus_fast configuration\nexport DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus\n\n# dbus2mqtt configuration\nMQTT__HOST=localhost\nMQTT__PORT=1883\nMQTT__USERNAME=\nMQTT__PASSWORD=\n</code></pre> <p>or</p> <pre><code>mqtt:\n  host: localhost\n  port: 1883\n  subscription_topics:\n    - dbus2mqtt/#\n</code></pre>"},{"location":"#exposing-dbus-methods","title":"Exposing dbus methods","text":"<pre><code>dbus:\n  subscriptions:\n    - bus_name: org.mpris.MediaPlayer2.*\n      path: /org/mpris/MediaPlayer2\n      interfaces:\n        - interface: org.mpris.MediaPlayer2.Player\n          mqtt_command_topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n          methods:\n            - method: Pause\n            - method: Play\n</code></pre> <p>This configuration will expose 2 methods. Triggering methods can be done by publishing json messages to the <code>dbus2mqtt/org.mpris.MediaPlayer2/command</code> MQTT topic. Arguments can be passed along in <code>args</code>.</p> <p>Some examples that call methods  on all bus_names matching the configured pattern</p> <pre><code>{\n    \"method\": \"Play\",\n}\n</code></pre> <pre><code>{\n    \"method\": \"OpenUri\",\n    \"args\": []\n}\n</code></pre> <p>To specifically target objects the properties <code>bus_name</code> and/or <code>path</code> can be used. Both properties support wildcards</p> <pre><code>{\n    \"method\": \"Play\",\n    \"bus_name\": \"*.firefox\",\n    \"path\": \"/org/mpris/MediaPlayer2\"\n}\n</code></pre>"},{"location":"#exposing-dbus-signals","title":"Exposing dbus signals","text":"<p>Publishing signals to MQTT topics works by subscribing to the relevant signal and using flows for publishing</p> <pre><code>dbus:\n  subscriptions:\n    - bus_name: org.mpris.MediaPlayer2.*\n      path: /org/mpris/MediaPlayer2\n      interfaces:\n        - interface: org.freedesktop.DBus.Properties\n           signals:\n             - signal: PropertiesChanged\n\n      flows:\n        - name: \"Property Changed flow\"\n          triggers:\n            - type: on_signal\n          actions:\n            - type: mqtt_publish\n              topic: dbus2mqtt/org.mpris.MediaPlayer2/signals/PropertiesChanged\n              payload_type: json\n</code></pre>"},{"location":"#flows","title":"Flows","text":"<p>A reference of all supported flow triggers and actions can be found on Flows</p>"},{"location":"#jinja-templating","title":"Jinja templating","text":"<p>TODO: Document Jinja templating, for now see the MPRIS to Home Assistant Media Player integration example</p>"},{"location":"developer/","title":"Developer guide","text":""},{"location":"developer/#specifications","title":"Specifications","text":"<p>Generic DBus specifications:</p> <ul> <li>D-Bus Tutorial</li> <li>D-Bus Specification</li> </ul>"},{"location":"developer/#running-from-source","title":"Running from source","text":"<pre><code>uv run main.py --config config.yaml\n</code></pre>"},{"location":"developer/debugging_dbus/","title":"Debugging dbus","text":"<p>Useful snippets for checking what's going on on dbus</p> <pre><code># monitor all dbus traffic\ndbus-monitor\n\n# show introspection data for dbus objects\nbusctl --user introspect org.freedesktop.DBus /org/freedesktop/DBus\n</code></pre> <p>Useful snippts for MPRIS debugging</p> <pre><code>playerctl -l\n\nbusctl --user introspect org.mpris.MediaPlayer2.vlc /org/mpris/MediaPlayer2\n\ndbus-send --print-reply --session --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames | grep mpris\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>Examples work better than large amounts of documentation and puzzling everything together. Feel free to use these examples as-is or adapt them to your own likening.</p> <p>Each example comes with a dbus2mqtt configuration file and corresponding documentation.</p> <ul> <li>MPRIS to Home Assistant Media Player integration</li> <li>BlueZ</li> <li>Publish dbus2mqtt internal state</li> </ul>"},{"location":"examples/bluez/","title":"Bluez","text":""},{"location":"examples/bluez/#introduction","title":"Introduction","text":"<p>This configuration file demonstrates how to use dbus2mqtt to bridge D-Bus events from BlueZ (the official Linux Bluetooth protocol stack) to MQTT topics. It subscribes to relevant D-Bus signals and properties for both the Bluetooth adapter (<code>hci0</code>) and all Bluetooth devices managed by BlueZ. The configuration defines flows that:</p> <ul> <li>Monitor property changes and object lifecycle events (added/removed) for the Bluetooth adapter and devices.</li> <li>Retrieve the current state of the adapter or device using the <code>GetAll</code> method from the <code>org.freedesktop.DBus.Properties</code> interface.</li> <li>Publish the retrieved state as JSON payloads to structured MQTT topics, enabling real-time monitoring and integration with home automation or IoT systems.</li> </ul> <p>This setup allows MQTT clients to receive updates about Bluetooth adapter and device states, as well as notifications when devices are removed, making it easier to integrate Bluetooth events into broader automation workflows.</p>"},{"location":"examples/bluez/#setup-activities","title":"Setup activities","text":"<ul> <li>dbus2mqtt setup using the supplied bluez.yaml</li> </ul> <p>Execute the following command to run dbus2mqtt with the example configuration in this repository.</p> <pre><code>uv run dbus2mqtt --config docs/examples/bluez.yaml\n</code></pre>"},{"location":"examples/bluez/#commands","title":"Commands","text":"<p>The following table lists commands, their descriptions, and an example JSON payload for invoking them via MQTT.</p> <p>Dbus methods can be invoked by sendig the JSON payload to MQTT topic <code>dbus2mqtt/bluez/hci0/command</code>. Method calls will be done for all matching dbus objects.</p> MethodProperty Description Example MQTT JSON Payload <code>StartDiscovery</code> Starts bluetooth discovery <code>{ \"method\": \"StartDiscovery\" }</code> <code>StopDiscovery</code> Stops bluetooth discovery <code>{ \"method\": \"StopDiscovery\" }</code> <code>Connect</code> <code>{ \"method\": \"Connect\", \"path\": \"/org/bluez/hci0/dev_A1_A2_A3_A4_A5_A6\" }</code> <code>Disconnect</code> <code>{ \"method\": \"Disconnect\", \"path\": \"/org/bluez/hci0/dev_A1_A2_A3_A4_A5_A6\" }</code> <code>Pair</code> <code>{ \"method\": \"Pair\", \"path\": \"/org/bluez/hci0/dev_A1_A2_A3_A4_A5_A6\" }</code> <code>CancelPairing</code> <code>{ \"method\": \"CancelPairing\", \"path\": \"/org/bluez/hci0/dev_A1_A2_A3_A4_A5_A6\" }</code>"},{"location":"examples/bluez/#references","title":"References","text":"<ul> <li>https://manpages.ubuntu.com/manpages/noble/man5/org.bluez</li> </ul>"},{"location":"examples/dbus2mqtt_internal_state/","title":"dbus2mqtt internal state (WIP)","text":""},{"location":"examples/dbus2mqtt_internal_state/#introduction","title":"Introduction","text":"<p>This will publish the dbus2mqtt's internal state to the <code>dbus2mqtt/state</code> MQTT topic every 5 seconds</p>"},{"location":"examples/dbus2mqtt_internal_state/#setup-activities","title":"Setup activities","text":"<p>Execute the following command to run dbus2mqtt with the example configuration in this repository.</p> <pre><code>dbus2mqtt --config docs/examples/dbus2mqtt_internal_state.yaml\n</code></pre> <pre><code>{\"now\": \"2025-04-23T16:01:34.985452\", \"dbus_list\": [\"org.freedesktop.systemd1\", \"org.gnome.SessionManager\"]}\n</code></pre>"},{"location":"examples/home_assistant_media_player/","title":"Mediaplayer integration with Home Assistant","text":""},{"location":"examples/home_assistant_media_player/#introduction","title":"Introduction","text":"<p>With dbus2mqtt as a bridge between MPRIS players and Home Assistant, it becomes possible to control Linux based media players via Home Assistant.</p> <p>The Media Player Remote Interfacing Specification (MPRIS) is a standard for controlling Linux media players. It provides a mechanism for compliant media players discovery, basic playback and media player state control as well as a tracklist interface which is used to add context to the current item.</p> <p>Pre-requisites:</p> <ul> <li>Home-Assistant with a working MQTT setup</li> <li>The community Home-Assistant plugin github.com/Sennevds/media_player.template</li> </ul>"},{"location":"examples/home_assistant_media_player/#features","title":"Features","text":"<ul> <li>dbus subscription using <code>org.mpris.MediaPlayer2.*</code> wildcard to support multiple concurrent MRPIS players</li> <li>Every 5 seconds, the state of the <code>first</code> known MPRIS player is published to MQTT topic <code>dbus2mqtt/org.mpris.MediaPlayer2/state</code></li> <li>Every MPRIS property update immediately publishes the state to MQTT topic <code>dbus2mqtt/org.mpris.MediaPlayer2/state</code></li> <li>Support for player commands (see below)</li> </ul>"},{"location":"examples/home_assistant_media_player/#setup-activities","title":"Setup activities","text":"<ul> <li>Configure the MQTT Sensor and player configuration in Home Assistant with the configuration listed below</li> <li>Config dbus2mqtt using the supplied home_assistant_media_player.yaml</li> </ul> <p>To run, execute the following commands</p> <pre><code>dbus2mqtt --config docs/examples/home_assistant_media_player.yaml\n</code></pre> <p>Note</p> <p>testttt</p>"},{"location":"examples/home_assistant_media_player/#tested-configurations","title":"Tested configurations","text":"<p>The following setup is known to work with Home Assistant.</p> Application PlayPause Stop NextPrevious SeekSetPosition Volume Quit Media Info Media Image Notes <code>Firefox</code> \u2705 \u2705 \u2705 \u2705 \u274c \u2705 \u2705 <code>VLC</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>Chromium</code> \u2705 \u2705 \u2705 \u2705 \u274c \u274c \u2705 \u2714\ufe0f Images not working when Chromium is running as snap <code>Kodi</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u274c \u2705 \u2705 Requires Kodi plugin MediaPlayerRemoteInterface <p>More players that support MPRIS can be found here: https://wiki.archlinux.org/title/MPRIS</p>"},{"location":"examples/home_assistant_media_player/#player-commands","title":"Player commands","text":"<p>The following table lists player commands, their descriptions, and an example JSON payload for invoking them via MQTT.</p> <p>Dbus methods can be invoked by sendig the JSON payload to MQTT topic <code>dbus2mqtt/org.mpris.MediaPlayer2/command</code>. Method calls will be done for all matching players. The same applies to property updates.</p> MethodProperty Description Example MQTT JSON Payload <code>Play</code> Starts playback <code>{ \"method\": \"Play\" }</code> <code>Pause</code> Pauses playback <code>{ \"method\": \"Pause\" }</code> <code>PlayPause</code> Toggles between play and pause <code>{ \"method\": \"PlayPause\" }</code> <code>Next</code> Next <code>{ \"method\": \"Next\" }</code> <code>Previous</code> Previous <code>{ \"method\": \"Previous\" }</code> <code>Stop</code> Stops playback <code>{ \"method\": \"Stop\" }</code> <code>Seek</code> Seek forward or backward in micro seconds <code>{ \"method\": \"Seek\", \"args\": [60000000] }</code> <code>Volume</code> Set volume (double between 0 and 1) <code>{ \"property\": \"Volume\", \"value\": 1.0 }</code> <code>SetPosition</code> Set / seek to position in micro seconds. First arguments needs to be trackid which can be determined via Metadata.mpris:trackid <code>{ \"method\": \"SetPosition\", \"args\": [\"/org/mpris/MediaPlayer2/firefox\", 170692139] }</code> <code>Quit</code> Quits the media player <code>{ \"method\": \"Quit\" }</code> <p>For an overview of MPRIS commands have a look at https://mpris2.readthedocs.io/en/latest/interfaces.html#mpris2.MediaPlayer2</p>"},{"location":"examples/home_assistant_media_player/#home-assistant-configuration","title":"Home Assistant configuration","text":"<p>The configuration shown below creates a few components in Home Assistant</p> <ul> <li>Media Player</li> <li>MQTT sensor listening on topic <code>dbus2mqtt/org.mpris.MediaPlayer2/state</code></li> </ul> <pre><code>mqtt:\n  sensor:\n    - name: MPRIS Media Player\n      state_topic: dbus2mqtt/org.mpris.MediaPlayer2/state\n      json_attributes_topic: dbus2mqtt/org.mpris.MediaPlayer2/state\n      value_template: &gt;-\n        {% set status = value_json.PlaybackStatus %}\n        {{ {'Playing': 'playing', 'Paused': 'paused', 'Stopped': 'idle'}.get(status, 'off') }}\n\n  image:\n    - name: MPRIS Media Player MQTT image\n      image_topic: dbus2mqtt/org.mpris.MediaPlayer2/artUrlImage\n\nmedia_player:\n  - platform: media_player_template\n    media_players:\n      mpris_media_player:\n        device_class: generic\n        friendly_name: MPRIS Media Player\n        value_template: \"{{ states('sensor.mpris_media_player') }}\"\n\n        current_volume_template: \"{{ state_attr('sensor.mpris_media_player', 'Volume') }}\"\n        current_is_muted_template: \"{{ state_attr('sensor.mpris_media_player', 'Volume') == 0 }}\"\n        current_position_template: \"{{ state_attr('sensor.mpris_media_player', 'Position') }}\"\n\n        # title: 'xesam:title' or filename without extension from 'xesam:url'\n        title_template: &gt;-\n          {% set metadata = state_attr('sensor.mpris_media_player', 'Metadata') or {} %}\n          {% set title = metadata.get('xesam:title', '') %}\n          {% if not title or title == '' %}\n          {% set title = metadata.get('xesam:url', '') | regex_findall(find='([^\\\\/]+?)(?:\\.[^.\\\\/]+)?$') | first | default('') %}\n          {% endif %}\n          {{ title }}\n\n        media_content_type_template: music  # needed to show 'artist'\n        media_duration_template: \"{{ (state_attr('sensor.mpris_media_player', 'Metadata') or {}).get('mpris:length', 0) }}\"\n        album_template: \"{{ (state_attr('sensor.mpris_media_player', 'Metadata') or {}).get('xesam:album', '') }}\"\n        artist_template: &gt;-\n          {% set artist = (state_attr('sensor.mpris_media_player', 'Metadata') or {}).get('xesam:artist', '') %}\n          {% if artist is string %}\n          {% set artist = [artist] %}\n          {% endif %}\n          {{ artist | first }}\n\n        # mpris:artUrl might contain a file:// schema. In these cases we rely on images published via MQTT\n        media_image_url_template: &gt;-\n          {% set mpris_metadata = state_attr('sensor.mpris_media_player', 'Metadata') or {} %}\n          {% set mpris_art_url = mpris_metadata.get('mpris:artUrl', '') %}\n          {% set mpris_url = mpris_metadata.get('xesam:url') %}\n\n          {% if mpris_art_url.startswith('http') %}\n            {{ mpris_art_url }}\n          {% elif mpris_art_url.startswith('file://') %}\n            http://127.0.0.1:8123{{ state_attr('image.mpris_media_player_mqtt_image', 'entity_picture') }}\n          {% else %}\n            {{\n                mpris_url | regex_replace(\n                  find='https:\\/\\/www\\\\.youtube\\\\.com\\/watch\\\\?v=([^&amp;]+).*',\n                  replace='https://img.youtube.com/vi/\\\\1/maxresdefault.jpg'\n                )\n            }}\n          {% endif %}\n\n        turn_off:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: '{\"method\": \"Quit\"}'\n        play:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: '{\"method\": \"Play\"}'\n        pause:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: '{\"method\": \"Pause\"}'\n        stop:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: '{\"method\": \"Stop\"}'\n        next:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: '{\"method\": \"Next\"}'\n        previous:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: '{\"method\": \"Previous\"}'\n        seek:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: &gt;\n              { \"method\": \"SetPosition\", \"args\": [\"{{ state_attr('sensor.mpris_media_player', 'Metadata')['mpris:trackid'] }}\", {{ position | int }}] }\n        set_volume:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: '{\"property\": \"Volume\", \"value\": {{volume}} }'\n        volume_up:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: &gt;\n              {\"property\": \"Volume\", \"value\": {{ [1, (state_attr('sensor.mpris_media_player', 'Volume') + 0.1)] | min }} }\n        volume_down:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: &gt;\n              {\"property\": \"Volume\", \"value\": {{ [0, (state_attr('sensor.mpris_media_player', 'Volume') - 0.1)] | max }} }\n</code></pre>"},{"location":"examples/linux_desktop/","title":"Linux Desktop (WIP)","text":""},{"location":"examples/linux_desktop/#introduction","title":"Introduction","text":"<p>Warning: This is not working, dbus-next is validating property names and bails on <code>power-saver-enable</code></p>"},{"location":"examples/linux_desktop/#setup-activities","title":"Setup activities","text":"<p>Trying out this example</p> <pre><code>uv run dbus2mqtt --config docs/examples/linux_desktop.yaml\n</code></pre>"},{"location":"examples/linux_desktop/#features","title":"Features","text":"<ul> <li>...</li> </ul>"},{"location":"examples/linux_desktop/#commands","title":"Commands","text":"<p>The following table lists the supported commands, their descriptions, and an example JSON payload for invoking them via MQTT.</p> <p>dbus methods can be invoked by sendig the JSON payload to MQTT topic <code>dbus2mqtt/Desktop/command</code>.</p> <p>For an overview of commands have a look at https://docs.flatpak.org/en/latest/portal-api-reference.html</p>"},{"location":"flows/","title":"Flows","text":"<p>dbus2mqtt allows you to add additional processing logic (flows) for when events occur. Configuration is done in yaml and a complete example can be found in home_assistant_media_player.yaml which is part of the MPRIS to Home Assistant Media Player integration example</p> <p>Flows can be defined on a global or dbus subscription level and can be triggered by any of the following events:</p> <ul> <li><code>schedule</code> for cron based schedules</li> <li><code>dbus_signal</code> for when dbus signal occur</li> <li><code>object_added</code> when a new bus_name is registered on dbus</li> <li><code>object_removed</code> when a bus_name is removed from dbus</li> </ul> <p>Within each flow a set of actions can be configured. These are executed in the order as defined in yaml</p> <ul> <li><code>log</code> for logging message</li> <li><code>context_set</code> to set variables</li> <li><code>mqtt_publish</code> to publish a mqtt message</li> </ul> <p>An example</p> <pre><code>flows:\n  - name: \"Example flow\"\n    triggers:\n      - type: schedule\n        interval: {seconds: 5}\n    actions:\n      - type: log\n        msg: hello from example flow\n</code></pre> <p>Some action parameters allow the use of jinja2 templating. dbus2mqtt supports both builtin jinja2 filters and comes with additional filters from jinja2-ansible-filters. When supported, it is documented below.</p> <p>Next: flow actions &amp; flow triggers</p>"},{"location":"flows/flow_actions/","title":"Flow actions","text":""},{"location":"flows/flow_actions/#log","title":"log","text":"<pre><code>type: log\nmsg: your log message\nlevvel: INFO\n</code></pre> key type description msg str a templated string level str One of [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"], defaults to 'INFO'"},{"location":"flows/flow_actions/#context_set","title":"context_set","text":"<pre><code>type: context_set\ncontext: {}\ndbus_object_context: {}\nglobal_context: {}\n</code></pre> key type description context dict Per flow execution context. Value can be a dict of strings or dict of templated strings dbus_object_context dict Per dbus object context, shared between multiple flow executions. Value can be a dict of strings or dict of templated strings global_context dict Global context, shared between multiple flow executions, over all subscriptions. Value can be a dict of strings or dict of templated strings"},{"location":"flows/flow_actions/#mqtt_publish","title":"mqtt_publish","text":"<pre><code>type: mqtt_publish\ntopic: dbus2mqtt/org.mpris.MediaPlayer2/state\npayload_type: json\npayload_template: {PlaybackStatus: \"Off\"}\n</code></pre> key type description topic string mqtt topic the messaage is published to payload_type string any of [json, yaml, text], defaults to json, format the message is published in to mqtt payload_template string, dict value can be a string, a dict of strings, a templated string or a nested dict of templated strings"},{"location":"flows/flow_triggers/","title":"Flow triggers","text":""},{"location":"flows/flow_triggers/#schedule","title":"schedule","text":"<pre><code>type: schedule\ninterval: {seconds: 5}\n</code></pre> <p>Schedule based triggers can be configured by setting either a cron or interval parameter. Scheduling is based on the   APScheduler library and allows the following configuration options</p> key description interval dict of time units and intervals, see https://apscheduler.readthedocs.io/en/3.x/modules/triggers/interval.html cron dict of time units and cron expressions, see https://apscheduler.readthedocs.io/en/3.x/modules/triggers/cron.html <p>When triggered, the following context parameters are available</p> name description N/A N/A"},{"location":"flows/flow_triggers/#dbus_signal","title":"dbus_signal","text":"<pre><code>type: dbus_signal\ninterface: org.freedesktop.DBus.Properties\nsignal: PropertiesChanged\n</code></pre> <p>DBus signals triggers must be configured with an anterface and path. Note that only subscribed signals can be configured as a trigger.</p> key description interface interface to filter on, e.g. 'org.freedesktop.DBus.Properties' signal signal name to filter on, e.g. PropertiesChanged <p>When triggered, the following context parameters are available</p> name type description bus_name string bus_name of the object that was registered on dbus path string path of the object that was registered on dbus interface string name of interface for which the signal was triggered signal string name of the signal, e.g. 'Seeked' args list signal arguments, list of objects"},{"location":"flows/flow_triggers/#object_added","title":"object_added","text":"<pre><code>type: object_added\n</code></pre> <p>When triggered, the following context parameters are available</p> name description bus_name bus_name of the object that was registered on dbus path path of the object that was registered on dbus"},{"location":"flows/flow_triggers/#object_removed","title":"object_removed","text":"<pre><code>type: object_removed\n</code></pre> <p>When triggered, the following context parameters are available</p> name description bus_name bus_name of the object that was registered on dbus path path of the object that was registered on dbus"}]}