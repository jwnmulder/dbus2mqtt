{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"debugging/","title":"Debugging","text":""},{"location":"debugging/#running-from-source","title":"Running from source","text":"<pre><code>uv run main.py --config config.yaml\n</code></pre>"},{"location":"debugging/#dbus-debugging","title":"dbus debugging","text":"<pre><code>uv run dbus2mqtt\n\n# https://dbus.freedesktop.org/doc/dbus-tutorial.html\n# https://dbus.freedesktop.org/doc/dbus-specification.html\ndbus-monitor\n\nbusctl --user introspect org.freedesktop.DBus /org/freedesktop/DBus\n\nplayerctl -l\nbusctl --user introspect org.mpris.MediaPlayer2.vlc /org/mpris/MediaPlayer2\n\ndbus-send --print-reply --session --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames | grep mpris\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>Examples in this repository</p> <ul> <li>MPRIS to Home Assistant Media Player integration</li> <li>BlueZ</li> <li>Publish dbus2mqtt internal state</li> </ul>"},{"location":"flows/","title":"Flows","text":"<p>dbus2mqtt allows you to add additional processing logic (flows) for when events occur. Configuration is done in yaml and a complete example can be found in home_assistant_media_player.yaml which is part of the MPRIS to Home Assistant Media Player integration example</p> <p>Flows can be defined on a global or dbus subscription level and can be triggered by any of the following events:</p> <ul> <li><code>schedule</code> for cron based schedules</li> <li><code>dbus_signal</code> for when dbus signal occur</li> <li><code>object_added</code> when a new bus_name is registered on dbus</li> <li><code>object_removed</code> when a bus_name is removed from dbus</li> </ul> <p>Within each flow a set of actions can be configured. These are executed in the order as defined in yaml</p> <ul> <li><code>log</code> for logging message</li> <li><code>context_set</code> to set variables</li> <li><code>mqtt_publish</code> to publish a mqtt message</li> </ul> <p>An example</p> <pre><code>flows:\n  - name: \"Example flow\"\n    triggers:\n      - type: schedule\n        interval: {seconds: 5}\n    actions:\n      - type: log\n        msg: hello from example flow\n</code></pre> <p>Some action parameters allow the use of jinja2 templating. dbus2mqtt supports both builtin jinja2 filters and comes with additional filters from jinja2-ansible-filters. When supported, it is documented below.</p>"},{"location":"flows/#flow-triggers","title":"Flow triggers","text":""},{"location":"flows/#schedule","title":"schedule","text":"<pre><code>type: schedule\ninterval: {seconds: 5}\n</code></pre> <p>Schedule based triggers can be configured by setting either a cron or interval parameter. Scheduling is based on the   APScheduler library and allows the following configuration options</p> key description interval dict of time units and intervals, see https://apscheduler.readthedocs.io/en/3.x/modules/triggers/interval.html cron dict of time units and cron expressions, see https://apscheduler.readthedocs.io/en/3.x/modules/triggers/cron.html <p>When triggered, the following context parameters are available</p> name description N/A N/A"},{"location":"flows/#dbus_signal","title":"dbus_signal","text":"<pre><code>type: dbus_signal\ninterface: org.freedesktop.DBus.Properties\nsignal: PropertiesChanged\n</code></pre> <p>DBus signals triggers must be configured with an anterface and path. Note that only subscribed signals can be configured as a trigger.</p> key description interface interface to filter on, e.g. 'org.freedesktop.DBus.Properties' signal signal name to filter on, e.g. PropertiesChanged <p>When triggered, the following context parameters are available</p> name type description bus_name string bus_name of the object that was registered on dbus path string path of the object that was registered on dbus interface string name of interface for which the signal was triggered signal string name of the signal, e.g. 'Seeked' args list signal arguments, list of objects"},{"location":"flows/#object_added","title":"object_added","text":"<pre><code>type: object_added\n</code></pre> <p>When triggered, the following context parameters are available</p> name description bus_name bus_name of the object that was registered on dbus path path of the object that was registered on dbus"},{"location":"flows/#object_removed","title":"object_removed","text":"<pre><code>type: object_removed\n</code></pre> <p>When triggered, the following context parameters are available</p> name description bus_name bus_name of the object that was registered on dbus path path of the object that was registered on dbus"},{"location":"flows/#flow-actions","title":"Flow actions","text":""},{"location":"flows/#log","title":"log","text":"<pre><code>type: log\nmsg: your log message\nlevvel: INFO\n</code></pre> key type description msg str a templated string level str One of [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"], defaults to 'INFO'"},{"location":"flows/#context_set","title":"context_set","text":"<pre><code>type: context_set\ncontext: {}\ndbus_object_context: {}\nglobal_context: {}\n</code></pre> key type description context dict Per flow execution context. Value can be a dict of strings or dict of templated strings dbus_object_context dict Per dbus object context, shared between multiple flow executions. Value can be a dict of strings or dict of templated strings global_context dict Global context, shared between multiple flow executions, over all subscriptions. Value can be a dict of strings or dict of templated strings"},{"location":"flows/#mqtt_publish","title":"mqtt_publish","text":"<pre><code>type: mqtt_publish\ntopic: dbus2mqtt/org.mpris.MediaPlayer2/state\npayload_type: json\npayload_template: {PlaybackStatus: \"Off\"}\n</code></pre> key type description topic string mqtt topic the messaage is published to payload_type string any of [json, yaml, text], defaults to json, format the message is published in to mqtt payload_template string, dict value can be a string, a dict of strings, a templated string or a nested dict of templated strings"},{"location":"examples/bluez/","title":"Bluez","text":"<p>This configuration file demonstrates how to use dbus2mqtt to bridge D-Bus events from BlueZ (the official Linux Bluetooth protocol stack) to MQTT topics. It subscribes to relevant D-Bus signals and properties for both the Bluetooth adapter (<code>hci0</code>) and all Bluetooth devices managed by BlueZ. The configuration defines flows that:</p> <ul> <li>Monitor property changes and object lifecycle events (added/removed) for the Bluetooth adapter and devices.</li> <li>Retrieve the current state of the adapter or device using the <code>GetAll</code> method from the <code>org.freedesktop.DBus.Properties</code> interface.</li> <li>Publish the retrieved state as JSON payloads to structured MQTT topics, enabling real-time monitoring and integration with home automation or IoT systems.</li> </ul> <p>This setup allows MQTT clients to receive updates about Bluetooth adapter and device states, as well as notifications when devices are removed, making it easier to integrate Bluetooth events into broader automation workflows.</p> <p>Configuration activities</p> <ul> <li>dbus2mqtt setup using the supplied bluez.yaml</li> </ul> <p>Execute the following command to run dbus2mqtt with the example configuration in this repository.</p> <pre><code>uv run dbus2mqtt --config docs/examples/bluez.yaml\n</code></pre>"},{"location":"examples/bluez/#commands","title":"Commands","text":"<p>The following table lists commands, their descriptions, and an example JSON payload for invoking them via MQTT.</p> <p>Dbus methods can be invoked by sendig the JSON payload to MQTT topic <code>dbus2mqtt/bluez/hci0/command</code>. Method calls will be done for all matching dbus objects.</p> Interface MethodProperty Description Example MQTT JSON Payload <code>org.bluez.Adapter1</code> <code>StartDiscovery</code> Starts bluetooth discovery <code>{ \"method\": \"StartDiscovery\" }</code> <code>org.bluez.Adapter1</code> <code>StopDiscovery</code> Stops bluetooth discovery <code>{ \"method\": \"StopDiscovery\" }</code> <code>org.bluez.Device1</code> <code>Connect</code> <code>{ \"method\": \"Connect\", \"path\": \"/org/bluez/hci0/dev_A1_A2_A3_A4_A5_A6\" }</code> <code>org.bluez.Device1</code> <code>Disconnect</code> <code>{ \"method\": \"Disconnect\", \"path\": \"/org/bluez/hci0/dev_A1_A2_A3_A4_A5_A6\" }</code> <code>org.bluez.Device1</code> <code>Pair</code> <code>{ \"method\": \"Pair\", \"path\": \"/org/bluez/hci0/dev_A1_A2_A3_A4_A5_A6\" }</code> <code>org.bluez.Device1</code> <code>CancelPairing</code> <code>{ \"method\": \"CancelPairing\", \"path\": \"/org/bluez/hci0/dev_A1_A2_A3_A4_A5_A6\" }</code> <p>https://manpages.ubuntu.com/manpages/noble/man5/org.bluez.</p>"},{"location":"examples/dbus2mqtt_internal_state/","title":"dbus2mqtt internal state example","text":"<p>Execute the following command to run dbus2mqtt with the example configuration in this repository.</p> <pre><code>dbus2mqtt --config docs/examples/dbus2mqtt_internal_state.yaml\n</code></pre> <p>This will publish the dbus2mqtt's internal state to the <code>dbus2mqtt/state</code> MQTT topic every 5 seconds</p> <pre><code>{\"now\": \"2025-04-23T16:01:34.985452\", \"dbus_list\": [\"org.freedesktop.systemd1\", \"org.gnome.SessionManager\"]}\n</code></pre>"},{"location":"examples/home_assistant_media_player/","title":"Mediaplayer integration with Home Assistant","text":"<p>With dbus2mqtt as a bridge between MPRIS players and Home Assistant, it becomes possible to control Linux based media players via Home Assistant.</p> <p>The Media Player Remote Interfacing Specification (MPRIS) is a standard for controlling Linux media players. It provides a mechanism for compliant media players discovery, basic playback and media player state control as well as a tracklist interface which is used to add context to the current item.</p> <p>Pre-requisites:</p> <ul> <li>Home-Assistant with a working MQTT setup</li> <li>The media_player.template plugin</li> </ul> <p>Features:</p> <ul> <li>dbus subscription using <code>org.mpris.MediaPlayer2.*</code> wildcard to support multiple concurrent MRPIS players</li> <li>Every 5 seconds, the state of the <code>first</code> known MPRIS player is published to MQTT topic <code>dbus2mqtt/org.mpris.MediaPlayer2/state</code></li> <li>Every MPRIS property update immediately publishes the state to MQTT topic <code>dbus2mqtt/org.mpris.MediaPlayer2/state</code></li> <li>Support for player commands (see below)</li> </ul> <p>Configuration activities</p> <ul> <li>MQTT Sensor and player configuration in Home Assistant (see below)</li> <li>dbus2mqtt setup using the supplied home_assistant_media_player.yaml</li> </ul> <p>Execute the following command to run dbus2mqtt with the example configuration in this repository.</p> <pre><code>dbus2mqtt --config docs/examples/home_assistant_media_player.yaml\n</code></pre>"},{"location":"examples/home_assistant_media_player/#tested-configurations","title":"Tested configurations","text":"<p>The following setup is known to work with Home Assistant.</p> Application PlayPause Stop NextPrevious SeekSetPosition Volume Quit Media Info Media Image Notes <code>Firefox</code> \u2705 \u2705 \u2705 \u2705 \u274c \u2705 \u2705 <code>VLC</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>Chromium</code> \u2705 \u2705 \u2705 \u2705 \u274c \u274c \u2705 \u2714\ufe0f Images not working when Chromium is running as snap <code>Kodi</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u274c \u2705 \u2705 Requires Kodi plugin MediaPlayerRemoteInterface Requires path to be set to '/'Signals not working due to non-defaut path <p>More players that support MPRIS can be found here: https://wiki.archlinux.org/title/MPRIS</p>"},{"location":"examples/home_assistant_media_player/#player-commands","title":"Player commands","text":"<p>The following table lists player commands, their descriptions, and an example JSON payload for invoking them via MQTT.</p> <p>Dbus methods can be invoked by sendig the JSON payload to MQTT topic <code>dbus2mqtt/org.mpris.MediaPlayer2/command</code>. Method calls will be done for all matching players. The same applies to property updates.</p> Interface MethodProperty Description Example MQTT JSON Payload <code>org.mpris.MediaPlayer2.Player</code> <code>Play</code> Starts playback <code>{ \"method\": \"Play\" }</code> <code>org.mpris.MediaPlayer2.Player</code> <code>Pause</code> Pauses playback <code>{ \"method\": \"Pause\" }</code> <code>org.mpris.MediaPlayer2.Player</code> <code>PlayPause</code> Toggles between play and pause <code>{ \"method\": \"PlayPause\" }</code> <code>org.mpris.MediaPlayer2.Player</code> <code>Next</code> Next <code>{ \"method\": \"Next\" }</code> <code>org.mpris.MediaPlayer2.Player</code> <code>Previous</code> Previous <code>{ \"method\": \"Previous\" }</code> <code>org.mpris.MediaPlayer2.Player</code> <code>Stop</code> Stops playback <code>{ \"method\": \"Stop\" }</code> <code>org.mpris.MediaPlayer2.Player</code> <code>Seek</code> Seek forward or backward in micro seconds <code>{ \"method\": \"Seek\", \"args\": [60000000] }</code> <code>org.mpris.MediaPlayer2.Player</code> <code>Volume</code> Set volume (double between 0 and 1) <code>{ \"property\": \"Volume\", \"value\": 1.0 }</code> <code>org.mpris.MediaPlayer2.Player</code> <code>SetPosition</code> Set / seek to position in micro seconds. First arguments needs to be trackid which can be determined via Metadata.mpris:trackid <code>{ \"method\": \"SetPosition\", \"args\": [\"/org/mpris/MediaPlayer2/firefox\", 170692139] }</code> <code>org.mpris.MediaPlayer2</code> <code>Quit</code> Quits the media player <code>{ \"method\": \"Quit\" }</code> <p>For an overview of MPRIS commands have a look at https://mpris2.readthedocs.io/en/latest/interfaces.html#mpris2.MediaPlayer2</p>"},{"location":"examples/home_assistant_media_player/#home-assistant-configuration","title":"Home Assistant configuration","text":"<p>The configuration shown below creates a few components in Home Assistant</p> <ul> <li>Media Player</li> <li>MQTT sensor listening on topic <code>dbus2mqtt/org.mpris.MediaPlayer2/state</code></li> </ul> <pre><code>mqtt:\n  sensor:\n    - name: MPRIS Media Player\n      state_topic: dbus2mqtt/org.mpris.MediaPlayer2/state\n      json_attributes_topic: dbus2mqtt/org.mpris.MediaPlayer2/state\n      value_template: &gt;-\n        {% set status = value_json.PlaybackStatus %}\n        {{ {'Playing': 'playing', 'Paused': 'paused', 'Stopped': 'idle'}.get(status, 'off') }}\n\n  image:\n    - name: MPRIS Media Player MQTT image\n      image_topic: dbus2mqtt/org.mpris.MediaPlayer2/artUrlImage\n\nmedia_player:\n  - platform: media_player_template\n    media_players:\n      mpris_media_player:\n        device_class: generic\n        friendly_name: MPRIS Media Player\n        value_template: \"{{ states('sensor.mpris_media_player') }}\"\n\n        current_volume_template: \"{{ state_attr('sensor.mpris_media_player', 'Volume') }}\"\n        current_is_muted_template: \"{{ state_attr('sensor.mpris_media_player', 'Volume') == 0 }}\"\n        current_position_template: \"{{ state_attr('sensor.mpris_media_player', 'Position') }}\"\n\n        # title: 'xesam:title' or filename without extension from 'xesam:url'\n        title_template: &gt;-\n          {% set metadata = state_attr('sensor.mpris_media_player', 'Metadata') or {} %}\n          {% set title = metadata.get('xesam:title', '') %}\n          {% if not title or title == '' %}\n          {% set title = metadata.get('xesam:url', '') | regex_findall(find='([^\\\\/]+?)(?:\\.[^.\\\\/]+)?$') | first | default('') %}\n          {% endif %}\n          {{ title }}\n\n        media_content_type_template: music  # needed to show 'artist'\n        media_duration_template: \"{{ (state_attr('sensor.mpris_media_player', 'Metadata') or {}).get('mpris:length', 0) }}\"\n        album_template: \"{{ (state_attr('sensor.mpris_media_player', 'Metadata') or {}).get('xesam:album', '') }}\"\n        artist_template: &gt;-\n          {% set artist = (state_attr('sensor.mpris_media_player', 'Metadata') or {}).get('xesam:artist', '') %}\n          {% if artist is string %}\n          {% set artist = [artist] %}\n          {% endif %}\n          {{ artist | first }}\n\n        # mpris:artUrl might contain a file:// schema. In these cases we rely on images published via MQTT\n        media_image_url_template: &gt;-\n          {% set mpris_metadata = state_attr('sensor.mpris_media_player', 'Metadata') or {} %}\n          {% set mpris_art_url = mpris_metadata.get('mpris:artUrl', '') %}\n          {% set mpris_url = mpris_metadata.get('xesam:url') %}\n\n          {% if mpris_art_url.startswith('http') %}\n            {{ mpris_art_url }}\n          {% elif mpris_art_url.startswith('file://') %}\n            http://127.0.0.1:8123{{ state_attr('image.mpris_media_player_mqtt_image', 'entity_picture') }}\n          {% else %}\n            {{\n                mpris_url | regex_replace(\n                  find='https:\\/\\/www\\\\.youtube\\\\.com\\/watch\\\\?v=([^&amp;]+).*',\n                  replace='https://img.youtube.com/vi/\\\\1/maxresdefault.jpg'\n                )\n            }}\n          {% endif %}\n\n        turn_off:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: '{\"method\": \"Quit\"}'\n        play:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: '{\"method\": \"Play\"}'\n        pause:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: '{\"method\": \"Pause\"}'\n        stop:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: '{\"method\": \"Stop\"}'\n        next:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: '{\"method\": \"Next\"}'\n        previous:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: '{\"method\": \"Previous\"}'\n        seek:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: &gt;\n              { \"method\": \"SetPosition\", \"args\": [\"{{ state_attr('sensor.mpris_media_player', 'Metadata')['mpris:trackid'] }}\", {{ position | int }}] }\n        set_volume:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: '{\"property\": \"Volume\", \"value\": {{volume}} }'\n        volume_up:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: &gt;\n              {\"property\": \"Volume\", \"value\": {{ [1, (state_attr('sensor.mpris_media_player', 'Volume') + 0.1)] | min }} }\n        volume_down:\n          service: mqtt.publish\n          data:\n            topic: dbus2mqtt/org.mpris.MediaPlayer2/command\n            payload: &gt;\n              {\"property\": \"Volume\", \"value\": {{ [0, (state_attr('sensor.mpris_media_player', 'Volume') - 0.1)] | max }} }\n</code></pre>"},{"location":"examples/linux_desktop/","title":"Linux Desktop","text":"<p>Warning: This is not working, dbus-next is validating property names and bails on <code>power-saver-enable</code></p> <p>Trying out this example</p> <pre><code>uv run dbus2mqtt --config docs/examples/linux_desktop.yaml\n</code></pre> <p>This example shows how this dbus2mqtt can act as a bridge between the MPRIS player and Home Assistant.</p> <p>Features:</p> <ul> <li>...</li> </ul>"},{"location":"examples/linux_desktop/#commands","title":"Commands","text":"<p>The following table lists the supported commands, their descriptions, and an example JSON payload for invoking them via MQTT.</p> <p>dbus methods can be invoked by sendig the JSON payload to MQTT topic <code>dbus2mqtt/Desktop/command</code>.</p> <p>For an overview of commands have a look at https://docs.flatpak.org/en/latest/portal-api-reference.html</p>"}]}